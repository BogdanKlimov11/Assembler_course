_bubble_sort:
    mov rsi, array       ; Указатель на начало массива
    mov rcx, size        ; Количество элементов массива
outer_loop:
    xor rdi, rdi         ; Флаг, обозначающий, что не было обменов
    mov rdx, rcx         ; Регистр, содержащий текущую длину массива
inner_loop:
    mov al, [rsi]        ; Загрузить текущий элемент массива
    mov bl, [rsi + 1]    ; Загрузить следующий элемент массива
    cmp al, bl           ; Сравнить текущий и следующий элементы
    jle not_swap         ; Если текущий элемент <= следующего, перейти к следующему элементу
    xchg al, bl          ; Обменять значения, если текущий элемент > следующего
    mov [rsi], al        ; Сохранить текущий элемент обратно в массив
    mov [rsi + 1], bl    ; Сохранить следующий элемент обратно в массив
    mov rdi, 1           ; Установить флаг обмена в 1
not_swap:
    inc rsi              ; Перейти к следующему элементу массива
    dec rdx              ; Уменьшить счетчик длины массива
    jnz inner_loop       ; Повторить внутренний цикл, пока длина массива не станет равной 0
    test rdi, rdi        ; Проверить, были ли какие-либо обмены
    jnz outer_loop       ; Если были, повторить внешний цикл
    ret

exit:
    mov eax, 60          ; Системный вызов exit
    xor edi, edi         ; Код возврата 0
    syscall              ; Вызов системного вызова
